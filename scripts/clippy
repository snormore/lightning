#!/bin/bash
set -eou pipefail

# Define cargo clippy function
function cargo_clippy() {
    cargo clippy --all-features --all-targets -- -Dclippy::all -Dwarnings
}

# Run cargo clippy on workspace crates
echo "Running cargo clippy on workspace..."
cargo_clippy

# List of crates that are known to not compile successfully.
# TODO(snormore): Fix these crates so they compile successfully.
excluded_crates=(
    "./etc/global-metrics"
    "./etc/ebpf/service"
    "./etc/tui"
    "./lib/cdk-x-platform-test"
)

# Build find command to exclude some basenames
excluded_basenames=("target" "scripts" ".git" ".github" ".config" "docs")
find_command="find . -type d -mindepth 1"
for basename in "${excluded_basenames[@]}"; do
    find_command+=" -not -path '*/${basename}/*'"
done

# Get list of workspace members
workspace_members=($(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.source == null) | .manifest_path | rtrimstr("/Cargo.toml")'))

# Look through all directories recursively and run clippy on them, not including the root
# directory or known workspace members.
eval "$find_command" | while read dir; do
    if [[ " ${excluded_crates[@]} " =~ " ${dir} " ]]; then
        echo "Skipping excluded crate $dir"
        continue
    fi

    if [[ " ${workspace_members[@]} " =~ " $(realpath ${dir}) " ]]; then
        continue
    fi

    (
        cd "$dir"

        if [ -f scripts/build ]; then
            echo "Running cargo clippy on $dir with scripts/clippy..."
            scripts/clippy
        elif [ -f Cargo.toml ]; then
            echo "Running cargo clippy on $dir..."
            cargo_clippy
        fi
    )
done
